# ml-service/train_all_districts.py
import requests
import json
from config import Config

def train_all_districts():
    """–¢—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ –¥–ª—è –≤—Å—ñ—Ö —Ä–∞–π–æ–Ω—ñ–≤"""
    
    print("=" * 60)
    print("üéØ –¢–†–ï–ù–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–ï–ô –î–õ–Ø –í–°–Ü–• –†–ê–ô–û–ù–Ü–í –õ–¨–í–û–í–ê")
    print("=" * 60)
    
    base_url = f"http://localhost:{Config.FLASK_PORT}"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    training_params = {
        "days": 365,    # –í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ
        "epochs": 20    # 20 –µ–ø–æ—Ö (–¥–ª—è –º–∞–ª–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É)
    }
    
    results = []
    errors = []
    
    for district in Config.DISTRICTS:
        district_id = district['id']
        district_name = district['name']
        
        print(f"\n{'='*60}")
        print(f"üèòÔ∏è –†–∞–π–æ–Ω {district_id}: {district_name}")
        print(f"{'='*60}")
        
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ POST –∑–∞–ø–∏—Ç –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            response = requests.post(
                f"{base_url}/api/train/{district_id}",
                json=training_params,
                timeout=300  # 5 —Ö–≤–∏–ª–∏–Ω timeout
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('success'):
                    print(f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
                    print(f"   üìä –ó–∞–ø–∏—Å—ñ–≤: {data.get('training_records', 'N/A')}")
                    
                    epochs = data.get('epochs_trained') or data.get('epochs')
                    print(f"   üîÑ –ï–ø–æ—Ö: {epochs if epochs else 'N/A'}")
                    
                    # –ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
                    metrics = data.get('metrics', {})
                    
                    if isinstance(metrics, dict):
                        # Avg MAE
                        avg_mae = metrics.get('avg_mae')
                        if avg_mae and isinstance(avg_mae, (int, float)):
                            print(f"   üìà Avg MAE: {avg_mae:.4f}")
                        
                        # PM2.5 MAE
                        pm25_mae = metrics.get('pm25_mae')
                        if pm25_mae and isinstance(pm25_mae, (int, float)):
                            print(f"   üí® PM2.5 MAE: {pm25_mae:.4f}")
                    
                    results.append({
                        'district_id': district_id,
                        'district_name': district_name,
                        'status': 'success',
                        'metrics': metrics,
                        'records': data.get('training_records', 0)
                    })
                else:
                    error_msg = data.get('error', 'Unknown error')
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_msg}")
                    errors.append({
                        'district_id': district_id,
                        'district_name': district_name,
                        'error': error_msg
                    })
            else:
                error_data = response.json() if response.text else {}
                error_msg = error_data.get('error', f'HTTP {response.status_code}')
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_msg}")
                errors.append({
                    'district_id': district_id,
                    'district_name': district_name,
                    'error': error_msg
                })
                
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è Timeout - —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ")
            errors.append({
                'district_id': district_id,
                'district_name': district_name,
                'error': 'Timeout'
            })
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            errors.append({
                'district_id': district_id,
                'district_name': district_name,
                'error': str(e)
            })
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–†–ï–ù–£–í–ê–ù–ù–Ø")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {len(results)} / {len(Config.DISTRICTS)}")
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {len(errors)} / {len(Config.DISTRICTS)}")
    
    if results:
        print("\nüéâ –£—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ —Ä–∞–π–æ–Ω–∏:")
        for r in results:
            print(f"   ‚Ä¢ {r['district_name']} (ID: {r['district_id']})")
            print(f"     –ó–∞–ø–∏—Å—ñ–≤: {r.get('records', 'N/A')}")
            
            if r.get('metrics') and isinstance(r['metrics'], dict):
                avg_mae = r['metrics'].get('avg_mae')
                if avg_mae and isinstance(avg_mae, (int, float)):
                    print(f"     Avg MAE: {avg_mae:.4f}")
    
    if errors:
        print("\n‚ö†Ô∏è –†–∞–π–æ–Ω–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏:")
        for e in errors:
            print(f"   ‚Ä¢ {e['district_name']} (ID: {e['district_id']}): {e['error']}")
    
    print("\n" + "=" * 60)
    
    if len(results) > 0:
        print("‚úÖ –ú–æ–¥–µ–ª—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: ml-service/trained_models/")
        print("\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("   1. –ú–æ–¥–µ–ª—ñ –≥–æ—Ç–æ–≤—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")
        print("   2. –ú–æ–∂–µ—à —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ API: GET /api/forecast/<district_id>")
        print("   3. –î–ª—è –æ–Ω–ª–∞–π–Ω-–Ω–∞–≤—á–∞–Ω–Ω—è —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ feedback —Å–∏—Å—Ç–µ–º—É")
    
    print("=" * 60)

if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π ML —Å–µ—Ä–≤—ñ—Å
    try:
        response = requests.get(f"http://localhost:{Config.FLASK_PORT}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ML Service –∑–∞–ø—É—â–µ–Ω–∏–π\n")
            train_all_districts()
        else:
            print("‚ùå ML Service –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
    except:
        print("‚ùå ML Service –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É: python app.py")