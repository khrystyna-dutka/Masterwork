# ml-service/utils/model_monitor.py
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from utils.db_helper import DatabaseHelper
from models.air_quality_model import AirQualityModel
from data.preprocessor import DataPreprocessor
from sklearn.model_selection import train_test_split
import joblib
import os

class ModelMonitor:
    """
    –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
    """
    
    def __init__(self):
        self.db = DatabaseHelper()
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        self.RETRAIN_THRESHOLD_MAE = 3.0  # –Ø–∫—â–æ MAE > 3.0 Œºg/m¬≥
        self.RETRAIN_THRESHOLD_HOURS = 24  # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è –∫–æ–∂–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
        self.MIN_DATA_FOR_RETRAIN = 50     # –ú—ñ–Ω—ñ–º—É–º –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
    
    def check_forecast_accuracy(self, district_id):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ vs —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        
        Returns:
            dict: {'mae': float, 'should_retrain': bool, 'metrics': dict}
        """
        print(f"\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –¥–ª—è —Ä–∞–π–æ–Ω—É {district_id}...")
        
        try:
            # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
            forecasts = self.db.get_forecasts_for_validation(district_id, hours_back=24)
            
            if len(forecasts) == 0:
                print("   ‚ö†Ô∏è –ù–µ–º–∞—î –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
                return {'mae': 0, 'should_retrain': False, 'reason': 'no_forecasts'}
            
            # 2. –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞ —Ç–æ–π –∂–µ –ø–µ—Ä—ñ–æ–¥
            actual = self.db.get_actual_data_for_period(
                district_id,
                forecasts['measured_at'].min(),
                forecasts['measured_at'].max()
            )
            
            if len(actual) == 0:
                print("   ‚ö†Ô∏è –ù–µ–º–∞—î —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
                return {'mae': 0, 'should_retrain': False, 'reason': 'no_actual_data'}
            
            # 3. –û–±'—î–¥–Ω–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ —Ç–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            merged = pd.merge(
                forecasts,
                actual,
                on='measured_at',
                suffixes=('_forecast', '_actual')
            )
            
            if len(merged) < 5:
                print("   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
                return {'mae': 0, 'should_retrain': False, 'reason': 'insufficient_overlap'}
            
            # 4. –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ MAE –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            params = ['pm25', 'pm10', 'no2', 'so2', 'co', 'o3']
            metrics = {}
            total_mae = 0
            
            for param in params:
                if f'{param}_forecast' in merged.columns and f'{param}_actual' in merged.columns:
                    mae = np.mean(np.abs(
                        merged[f'{param}_actual'] - merged[f'{param}_forecast']
                    ))
                    metrics[param] = {
                        'mae': round(float(mae), 3),
                        'forecast_mean': round(float(merged[f'{param}_forecast'].mean()), 2),
                        'actual_mean': round(float(merged[f'{param}_actual'].mean()), 2)
                    }
                    total_mae += mae
            
            avg_mae = total_mae / len(params)
            
            print(f"   üìä –°–µ—Ä–µ–¥–Ω—è MAE: {avg_mae:.3f}")
            print(f"   üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–æ {len(merged)} —Ç–æ—á–æ–∫")
            
            # 5. –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
            should_retrain = avg_mae > self.RETRAIN_THRESHOLD_MAE
            is_critical = avg_mae > self.CRITICAL_MAE  # ‚¨ÖÔ∏è –î–û–î–ê–õ–ò
            
            if is_critical:
                print(f"   üö® –ö–†–ò–¢–ò–ß–ù–ê –ê–ù–û–ú–ê–õ–Ü–Ø! MAE ({avg_mae:.3f}) > {self.CRITICAL_MAE}")
                print(f"   üî¥ –ù–ï–ì–ê–ô–ù–ï –ü–ï–†–ï–ù–ê–í–ß–ê–ù–ù–Ø!")
            elif should_retrain:
                print(f"   ‚ö†Ô∏è MAE ({avg_mae:.3f}) > –ø–æ—Ä–æ–≥—É ({self.RETRAIN_THRESHOLD_MAE})")
                print(f"   üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è!")
            else:
                print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–∞—Ü—é—î –¥–æ–±—Ä–µ (MAE: {avg_mae:.3f})")
            
            return {
                'mae': round(avg_mae, 3),
                'should_retrain': should_retrain,
                'is_critical': is_critical,  # ‚¨ÖÔ∏è –î–û–î–ê–õ–ò
                'metrics': metrics,
                'samples_compared': len(merged),
                'reason': 'critical_anomaly' if is_critical else ('high_error' if should_retrain else 'good_performance')
            }
            
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
            return {'mae': 0, 'should_retrain': False, 'reason': f'error: {str(e)}'}
    
    def check_last_retrain_time(self, district_id):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–ª–∏ –≤–æ—Å—Ç–∞–Ω–Ω—î –±—É–ª–∞ –Ω–∞–≤—á–µ–Ω–∞ –º–æ–¥–µ–ª—å
        
        Returns:
            dict: {'hours_since_retrain': int, 'should_retrain': bool}
        """
        model_path = f'trained_models/model_district_{district_id}_xgboost.pkl'
        
        if not os.path.exists(model_path):
            return {'hours_since_retrain': 999, 'should_retrain': True, 'reason': 'no_model'}
        
        # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É
        last_modified = datetime.fromtimestamp(os.path.getmtime(model_path))
        hours_since = (datetime.now() - last_modified).total_seconds() / 3600
        
        should_retrain = hours_since > self.RETRAIN_THRESHOLD_HOURS
        
        print(f"   üïê –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞ {hours_since:.1f} –≥–æ–¥–∏–Ω —Ç–æ–º—É")
        
        if should_retrain:
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–π—à–ª–æ > {self.RETRAIN_THRESHOLD_HOURS} –≥–æ–¥–∏–Ω")
            print(f"   üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è!")
        
        return {
            'hours_since_retrain': round(hours_since, 1),
            'should_retrain': should_retrain,
            'reason': 'time_threshold' if should_retrain else 'recent'
        }
    
    def retrain_model(self, district_id):
        """
        –ü–µ—Ä–µ–Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–π–æ–Ω—É
        
        Returns:
            dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        """
        print(f"\nüîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –¥–ª—è —Ä–∞–π–æ–Ω—É {district_id}...")
        
        try:
            # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
            df = self.db.get_training_data(district_id, days=30)
            
            if len(df) < self.MIN_DATA_FOR_RETRAIN:
                return {
                    'success': False,
                    'reason': f'Not enough data: {len(df)} < {self.MIN_DATA_FOR_RETRAIN}'
                }
            
            print(f"   üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
            
            # 2. –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ features
            preprocessor = DataPreprocessor(district_id)
            X, y, df_processed = preprocessor.prepare_training_data(df)
            
            if len(X) < 20:
                return {
                    'success': False,
                    'reason': f'Not enough processed data: {len(X)}'
                }
            
            # 3. –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –Ω–∞ train/val
            X_train, X_val, y_train, y_val = train_test_split(
                X, y, test_size=0.2, random_state=42, shuffle=False
            )
            
            # 4. –ù–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å
            model = AirQualityModel(district_id, model_type='xgboost')
            train_score, val_score = model.train(X_train, y_train, X_val, y_val)
            
            # 5. –û—Ü—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å
            metrics = model.evaluate(X_val, y_val)
            
            print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–Ω–∞–≤—á–µ–Ω–∞!")
            print(f"   üìä Train R¬≤: {train_score:.4f}")
            print(f"   üìä Val R¬≤: {val_score:.4f}")
            
            return {
                'success': True,
                'train_score': round(train_score, 4),
                'val_score': round(val_score, 4),
                'metrics': metrics,
                'training_samples': len(X_train),
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è: {e}")
            return {
                'success': False,
                'reason': str(e)
            }
    
    def auto_retrain_if_needed(self, district_id):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        
        Returns:
            dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        """
        print(f"\n{'='*70}")
        print(f"ü§ñ AUTO-RETRAIN: –†–∞–π–æ–Ω {district_id}")
        print(f"{'='*70}")
        
        result = {
            'district_id': district_id,
            'timestamp': datetime.now().isoformat(),
            'checks': {},
            'retrained': False
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 1: –¢–æ—á–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤
        accuracy_check = self.check_forecast_accuracy(district_id)
        result['checks']['accuracy'] = accuracy_check
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 2: –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
        time_check = self.check_last_retrain_time(district_id)
        result['checks']['time'] = time_check
        
        # –†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        should_retrain = (
            accuracy_check.get('should_retrain', False) or
            time_check.get('should_retrain', False)
        )
        
        if should_retrain:
            print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è...")
            retrain_result = self.retrain_model(district_id)
            result['retrain_result'] = retrain_result
            result['retrained'] = retrain_result.get('success', False)
        else:
            print(f"\n‚úÖ –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ")
            result['retrained'] = False
        
        print(f"{'='*70}\n")
        
        return result