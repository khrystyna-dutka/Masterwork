# ml-service/scripts/create_feedback_table.py
"""
–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è training feedback (–æ–Ω–ª–∞–π–Ω-–Ω–∞–≤—á–∞–Ω–Ω—è)
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.db_helper import DatabaseHelper

def create_feedback_table():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é training_feedback"""
    
    print("=" * 70)
    print("üìä –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü TRAINING_FEEDBACK")
    print("=" * 70)
    
    sql = """
    -- –¢–∞–±–ª–∏—Ü—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è feedback (–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—é)
    CREATE TABLE IF NOT EXISTS training_feedback (
        id SERIAL PRIMARY KEY,
        district_id INTEGER NOT NULL,
        
        -- –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ 0-1)
        predicted_pm25 DECIMAL(10, 4),
        predicted_pm10 DECIMAL(10, 4),
        predicted_no2 DECIMAL(10, 4),
        predicted_so2 DECIMAL(10, 4),
        predicted_co DECIMAL(10, 4),
        predicted_o3 DECIMAL(10, 4),
        
        -- –†–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ 0-1)
        actual_pm25 DECIMAL(10, 4),
        actual_pm10 DECIMAL(10, 4),
        actual_no2 DECIMAL(10, 4),
        actual_so2 DECIMAL(10, 4),
        actual_co DECIMAL(10, 4),
        actual_o3 DECIMAL(10, 4),
        
        -- –ü–æ–º–∏–ª–∫–∏ (MAE)
        error_pm25 DECIMAL(10, 4),
        error_pm10 DECIMAL(10, 4),
        error_no2 DECIMAL(10, 4),
        error_so2 DECIMAL(10, 4),
        error_co DECIMAL(10, 4),
        error_o3 DECIMAL(10, 4),
        avg_error DECIMAL(10, 4),
        
        -- –ß–∞—Å –ø—Ä–æ–≥–Ω–æ–∑—É —Ç–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ
        forecast_for TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        
        -- –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
        used_for_training BOOLEAN DEFAULT FALSE
    );
    
    -- –Ü–Ω–¥–µ–∫—Å–∏
    CREATE INDEX IF NOT EXISTS idx_feedback_district ON training_feedback(district_id);
    CREATE INDEX IF NOT EXISTS idx_feedback_time ON training_feedback(forecast_for);
    CREATE INDEX IF NOT EXISTS idx_feedback_unused ON training_feedback(district_id, used_for_training) 
        WHERE used_for_training = FALSE;
    """
    
    db = DatabaseHelper()
    
    try:
        print("\nüîß –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î...")
        conn = db.get_connection()
        cursor = conn.cursor()
        
        print("üìù –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL...")
        cursor.execute(sql)
        conn.commit()
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—è training_feedback —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'training_feedback'
            ORDER BY ordinal_position
        """)
        
        columns = cursor.fetchall()
        print(f"\nüìä –°—Ç–≤–æ—Ä–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫:")
        for col_name, col_type in columns[:5]:
            print(f"   ‚Ä¢ {col_name}: {col_type}")
        print(f"   ... —Ç–∞ —â–µ {len(columns) - 5} –∫–æ–ª–æ–Ω–æ–∫")
        
        cursor.close()
        conn.close()
        
        print("\n" + "=" * 70)
        print("‚úÖ –¢–ê–ë–õ–ò–¶–Ø –ì–û–¢–û–í–ê!")
        print("=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    create_feedback_table()