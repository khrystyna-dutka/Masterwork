# ml-service/scripts/check_data_balance.py
"""
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –¥–∞–Ω–∏—Ö –ø–æ —Ä–∞–π–æ–Ω–∞—Ö
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.db_helper import DatabaseHelper
from config import Config

def check_data_balance():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö –ø–æ —Ä–∞–π–æ–Ω–∞—Ö"""
    
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–Ü–ó –ë–ê–õ–ê–ù–°–£ –î–ê–ù–ò–• –ü–û –†–ê–ô–û–ù–ê–•")
    print("=" * 80)
    
    db = DatabaseHelper()
    conn = db.get_connection()
    cursor = conn.cursor()
    
    print("\nüìä 1. –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü (is_forecast=FALSE) –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:")
    print("-" * 80)
    cursor.execute("""
        SELECT 
            district_id,
            COUNT(*) as total,
            MIN(measured_at) as first_time,
            MAX(measured_at) as last_time
        FROM air_quality_history
        WHERE is_forecast = FALSE
          AND measured_at >= NOW() - INTERVAL '7 days'
        GROUP BY district_id
        ORDER BY district_id
    """)
    
    real_data = cursor.fetchall()
    for row in real_data:
        district_name = Config.DISTRICTS[row[0]-1]['name']
        print(f"–†–∞–π–æ–Ω {row[0]} ({district_name:15s}): {row[1]:4d} –∑–∞–ø–∏—Å—ñ–≤  "
              f"({row[2].strftime('%d.%m %H:%M')} ‚Üí {row[3].strftime('%d.%m %H:%M')})")
    
    print("\nüìà 2. –ü–†–û–ì–ù–û–ó–ò (is_forecast=TRUE) –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏:")
    print("-" * 80)
    cursor.execute("""
        SELECT 
            district_id,
            COUNT(*) as total,
            MIN(measured_at) as first_time,
            MAX(measured_at) as last_time
        FROM air_quality_history
        WHERE is_forecast = TRUE
          AND measured_at >= NOW() - INTERVAL '24 hours'
        GROUP BY district_id
        ORDER BY district_id
    """)
    
    forecast_data = cursor.fetchall()
    for row in forecast_data:
        district_name = Config.DISTRICTS[row[0]-1]['name']
        print(f"–†–∞–π–æ–Ω {row[0]} ({district_name:15s}): {row[1]:4d} –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤  "
              f"({row[2].strftime('%d.%m %H:%M')} ‚Üí {row[3].strftime('%d.%m %H:%M')})")
    
    print("\nüîÑ 3. FEEDBACK (–∑—ñ–±—Ä–∞–Ω—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è):")
    print("-" * 80)
    cursor.execute("""
        SELECT 
            district_id,
            COUNT(*) as total,
            COUNT(*) FILTER (WHERE used_for_training = TRUE) as used,
            COUNT(*) FILTER (WHERE used_for_training = FALSE) as unused
        FROM training_feedback
        GROUP BY district_id
        ORDER BY district_id
    """)
    
    feedback_data = cursor.fetchall()
    for row in feedback_data:
        district_name = Config.DISTRICTS[row[0]-1]['name']
        print(f"–†–∞–π–æ–Ω {row[0]} ({district_name:15s}): {row[1]:3d} feedback  "
              f"(–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {row[2]}, –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {row[3]})")
    
    print("\nüí° 4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("-" * 80)
    
    # –ó–Ω–∞–π—Ç–∏ —Ä–∞–π–æ–Ω–∏ –∑ –º–∞–ª–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–∞–Ω–∏—Ö
    real_counts = {row[0]: row[1] for row in real_data}
    forecast_counts = {row[0]: row[1] for row in forecast_data}
    feedback_counts = {row[0]: row[1] for row in feedback_data}
    
    for district_id in range(1, 7):
        district_name = Config.DISTRICTS[district_id-1]['name']
        real = real_counts.get(district_id, 0)
        forecasts = forecast_counts.get(district_id, 0)
        feedback = feedback_counts.get(district_id, 0)
        
        issues = []
        if real < 100:
            issues.append(f"–º–∞–ª–æ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö ({real})")
        if forecasts < 10:
            issues.append(f"–º–∞–ª–æ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ ({forecasts})")
        if feedback < 5:
            issues.append(f"–º–∞–ª–æ feedback ({feedback})")
        
        if issues:
            print(f"‚ö†Ô∏è  –†–∞–π–æ–Ω {district_id} ({district_name}): {', '.join(issues)}")
    
    print("\n" + "=" * 80)
    
    cursor.close()
    conn.close()

if __name__ == "__main__":
    check_data_balance()