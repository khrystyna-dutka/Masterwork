# ml-service/scripts/check_district_2.py
"""
–î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∞–π–æ–Ω—É 2
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.db_helper import DatabaseHelper

def check_district_2():
    print("=" * 70)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –†–ê–ô–û–ù–£ 2 (–ó–ê–õ–Ü–ó–ù–ò–ß–ù–ò–ô)")
    print("=" * 70)
    
    db = DatabaseHelper()
    conn = db.get_connection()
    cursor = conn.cursor()
    
    # 1. –†–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    print("\n1Ô∏è‚É£ –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü (is_forecast=FALSE):")
    cursor.execute("""
        SELECT 
            COUNT(*) as total,
            MIN(measured_at) as first_time,
            MAX(measured_at) as last_time,
            AVG(pm25) as avg_pm25
        FROM air_quality_history
        WHERE district_id = 2
          AND is_forecast = FALSE
          AND measured_at >= NOW() - INTERVAL '7 days'
    """)
    
    real = cursor.fetchone()
    print(f"   –í—Å—å–æ–≥–æ: {real[0]} –∑–∞–ø–∏—Å—ñ–≤")
    if real[1]:
        print(f"   –ü–µ—Ä—ñ–æ–¥: {real[1]} ‚Üí {real[2]}")
        print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π PM2.5: {real[3]:.2f}")
    
    # 2. –ü—Ä–æ–≥–Ω–æ–∑–∏
    print("\n2Ô∏è‚É£ –ü–†–û–ì–ù–û–ó–ò (is_forecast=TRUE):")
    cursor.execute("""
        SELECT 
            COUNT(*) as total,
            MIN(measured_at) as first_time,
            MAX(measured_at) as last_time
        FROM air_quality_history
        WHERE district_id = 2
          AND is_forecast = TRUE
          AND measured_at >= NOW() - INTERVAL '24 hours'
    """)
    
    forecast = cursor.fetchone()
    print(f"   –í—Å—å–æ–≥–æ: {forecast[0]} –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤")
    if forecast[1]:
        print(f"   –ü–µ—Ä—ñ–æ–¥: {forecast[1]} ‚Üí {forecast[2]}")
    
    # 3. Feedback
    print("\n3Ô∏è‚É£ FEEDBACK:")
    cursor.execute("""
        SELECT COUNT(*) FROM training_feedback
        WHERE district_id = 2
    """)
    
    feedback_count = cursor.fetchone()[0]
    print(f"   –í—Å—å–æ–≥–æ: {feedback_count} feedback")
    
    # 4. –ü—Ä–æ–≥–Ω–æ–∑–∏ –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    print("\n4Ô∏è‚É£ –ü–†–û–ì–ù–û–ó–ò –ë–ï–ó –†–ï–ê–õ–¨–ù–ò–• –î–ê–ù–ò–•:")
    cursor.execute("""
        SELECT 
            f.id,
            f.measured_at as forecast_time,
            (
                SELECT COUNT(*)
                FROM air_quality_history r
                WHERE r.district_id = 2
                  AND r.is_forecast = FALSE
                  AND r.measured_at BETWEEN f.measured_at - INTERVAL '30 minutes'
                                        AND f.measured_at + INTERVAL '30 minutes'
            ) as has_real_data
        FROM air_quality_history f
        WHERE f.district_id = 2
          AND f.is_forecast = TRUE
          AND f.measured_at >= NOW() - INTERVAL '24 hours'
        ORDER BY f.measured_at DESC
        LIMIT 10
    """)
    
    forecasts_check = cursor.fetchall()
    print(f"   –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤:")
    
    no_match_count = 0
    for row in forecasts_check:
        has_real = row[2] > 0
        status = "‚úÖ" if has_real else "‚ùå"
        print(f"   {status} –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {row[1]} - —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ: {'—î' if has_real else '–ù–ï–ú–ê–Ñ'}")
        if not has_real:
            no_match_count += 1
    
    print(f"\n   ‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑—ñ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {no_match_count}/10")
    
    # 5. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏ —Ä–∞–π–æ–Ω–∞–º–∏
    print("\n5Ô∏è‚É£ –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ó –Ü–ù–®–ò–ú–ò –†–ê–ô–û–ù–ê–ú–ò (–∑–∞ 24 –≥–æ–¥):")
    cursor.execute("""
        SELECT 
            district_id,
            COUNT(*) FILTER (WHERE is_forecast = FALSE) as real_data,
            COUNT(*) FILTER (WHERE is_forecast = TRUE) as forecasts
        FROM air_quality_history
        WHERE measured_at >= NOW() - INTERVAL '24 hours'
        GROUP BY district_id
        ORDER BY district_id
    """)
    
    comparison = cursor.fetchall()
    for row in comparison:
        print(f"   –†–∞–π–æ–Ω {row[0]}: {row[1]} —Ä–µ–∞–ª—å–Ω–∏—Ö, {row[2]} –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤")
    
    print("\n" + "=" * 70)
    
    if no_match_count > 5:
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–Ø:")
        print("   –ü—Ä–æ–±–ª–µ–º–∞: –ø—Ä–æ–≥–Ω–æ–∑–∏ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –ø–æ —á–∞—Å—É")
        print("   –†—ñ—à–µ–Ω–Ω—è: –∑–±—ñ–ª—å—à–∏—Ç–∏ –≤—ñ–∫–Ω–æ –ø–æ—à—É–∫—É –≤ collect_feedback.py")
        print("   –ê–±–æ: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î data collector")
    
    if real[0] < 50:
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–Ø:")
        print("   –ü—Ä–æ–±–ª–µ–º–∞: –º–∞–ª–æ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–∞–π–æ–Ω—É 2")
        print("   –†—ñ—à–µ–Ω–Ω—è: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ data collector API")
    
    print("=" * 70)
    
    cursor.close()
    conn.close()

if __name__ == "__main__":
    check_district_2()