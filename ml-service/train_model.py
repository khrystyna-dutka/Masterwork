# ml-service/train_model.py
import sys
import os

# –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from data.preprocessor import DataPreprocessor
from models.air_quality_model import AirQualityModel
from utils.db_helper import DatabaseHelper
from config import Config
from sklearn.model_selection import train_test_split

def train_district_model(district_id):
    """
    –ù–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–π–æ–Ω—É
    """
    db = DatabaseHelper()
    
    print("\n" + "="*70)
    print(f"üéØ –ù–ê–í–ß–ê–ù–ù–Ø –ú–û–î–ï–õ–Ü: {Config.DISTRICTS[district_id-1]['name']} (ID: {district_id})")
    print("="*70)
    
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
    print("\n1Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ë–î...")
    df = db.get_training_data(district_id, days=30)
    
    if len(df) < 50:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è: {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
        print("   –ú—ñ–Ω—ñ–º—É–º –ø–æ—Ç—Ä—ñ–±–Ω–æ 50 –∑–∞–ø–∏—Å—ñ–≤")
        return False
    
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
    
    # 2. –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ features
    print("\n2Ô∏è‚É£ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ features...")
    preprocessor = DataPreprocessor(district_id)
    
    try:
        X, y, df_processed = preprocessor.prepare_training_data(df)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ features: {e}")
        return False
    
    if len(X) < 20:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏: {len(X)} –∑—Ä–∞–∑–∫—ñ–≤")
        print("   –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è lag —Ç–∞ rolling features –∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–∞–ª–æ –¥–∞–Ω–∏—Ö")
        return False
    
    # 3. –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –Ω–∞ train/val
    print("\n3Ô∏è‚É£ –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è train/val (80/20)...")
    X_train, X_val, y_train, y_val = train_test_split(
        X, y, 
        test_size=0.2, 
        random_state=42,
        shuffle=False  # –ù–µ –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ —á–∞—Å–æ–≤—ñ —Ä—è–¥–∏
    )
    
    print(f"   Train: {len(X_train)} –∑—Ä–∞–∑–∫—ñ–≤")
    print(f"   Val: {len(X_val)} –∑—Ä–∞–∑–∫—ñ–≤")
    
    # 4. –ù–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å
    print("\n4Ô∏è‚É£ –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    model = AirQualityModel(district_id, model_type='xgboost')
    
    try:
        train_score, val_score = model.train(X_train, y_train, X_val, y_val)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {e}")
        return False
    
    # 5. –î–µ—Ç–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    print("\n5Ô∏è‚É£ –û—Ü—ñ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ –Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó...")
    
    try:
        metrics = model.evaluate(X_val, y_val)  # ‚¨ÖÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ evaluate
        
        print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:")
        for param, values in metrics.items():
            print(f"   {param.upper()}: MAE={values['mae']:.3f}, RMSE={values['rmse']:.3f}, R¬≤={values['r2']:.4f}")
    
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏: {e}")
    
    print("\n" + "="*70)
    print(f"‚úÖ –ù–ê–í–ß–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û: {Config.DISTRICTS[district_id-1]['name']}")
    print("="*70)
    
    return True

def train_all_districts():
    """
    –ù–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—ñ –¥–ª—è –≤—Å—ñ—Ö —Ä–∞–π–æ–Ω—ñ–≤
    """
    print("\n" + "="*70)
    print("üöÄ –ù–ê–í–ß–ê–ù–ù–Ø –ú–û–î–ï–õ–ï–ô –î–õ–Ø –í–°–Ü–• –†–ê–ô–û–ù–Ü–í")
    print("="*70)
    
    results = []
    
    for district in Config.DISTRICTS:
        success = train_district_model(district['id'])
        results.append({
            'id': district['id'],
            'name': district['name'],
            'success': success
        })
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "="*70)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –ù–ê–í–ß–ê–ù–ù–Ø")
    print("="*70)
    
    successful = sum(1 for r in results if r['success'])
    
    for result in results:
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} –†–∞–π–æ–Ω {result['id']}: {result['name']}")
    
    print(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–≤—á–µ–Ω–æ: {successful}/{len(results)}")

if __name__ == "__main__":
    train_all_districts()