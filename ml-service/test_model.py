from utils.db_helper import DatabaseHelper
from data.preprocessor import DataPreprocessor
from models.lstm_model import LSTMForecastModel
from config import Config
import numpy as np
from sklearn.model_selection import train_test_split

def test_model_training():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
    
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø LSTM –ú–û–î–ï–õ–Ü")
    print("=" * 60)
    
    # –í–∏–±—Ä–∞—Ç–∏ —Ä–∞–π–æ–Ω –¥–ª—è —Ç–µ—Å—Ç—É
    district_id = 1
    
    print(f"\nüìå –†–∞–π–æ–Ω: {Config.DISTRICTS[district_id-1]['name']} (ID: {district_id})")
    
    # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ
    print("\n1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ë–î...")
    db = DatabaseHelper()
    df = db.get_historical_data(district_id, days=7)
    
    if len(df) < Config.SEQUENCE_LENGTH + 1:
        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!")
        print(f"   –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º: {Config.SEQUENCE_LENGTH + 1} –∑–∞–ø–∏—Å—ñ–≤")
        print(f"   –Ñ –∑–∞—Ä–∞–∑: {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
        print(f"\nüí° –ü—ñ–¥–∫–∞–∑–∫–∞: –î–æ—á–µ–∫–∞–π—Å—è –∫–æ–ª–∏ –Ω–∞–∫–æ–ø–∏—á–∏—Ç—å—Å—è –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö (2-3 –¥–Ω—ñ)")
        print(f"   –ê–±–æ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö")
        return
    
    # –ö—Ä–æ–∫ 2: –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
    print("\n2Ô∏è‚É£ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö...")
    preprocessor = DataPreprocessor(district_id)
    prepared_data = preprocessor.prepare_data(df)
    
    if prepared_data is None or prepared_data.empty:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö")
        return
    
    # –ö—Ä–æ–∫ 3: –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
    print("\n3Ô∏è‚É£ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...")
    normalized_data = preprocessor.normalize_data(prepared_data.values, fit=True)
    
    # –ö—Ä–æ–∫ 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π
    print("\n4Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è LSTM...")
    X, y = preprocessor.create_sequences(normalized_data, Config.SEQUENCE_LENGTH)
    
    if len(X) == 0:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ")
        return
    
    # –ö—Ä–æ–∫ 5: –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ train/val
    print("\n5Ô∏è‚É£ –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π –Ω–∞–±–æ—Ä–∏...")
    X_train, X_val, y_train, y_val = train_test_split(
        X, y, test_size=0.2, shuffle=False  # shuffle=False –¥–ª—è —á–∞—Å–æ–≤–∏—Ö —Ä—è–¥—ñ–≤
    )
    
    print(f"   Train: {len(X_train)} –∑—Ä–∞–∑–∫—ñ–≤")
    print(f"   Val: {len(X_val)} –∑—Ä–∞–∑–∫—ñ–≤")
    
    # –ö—Ä–æ–∫ 6: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    print("\n6Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è LSTM –º–æ–¥–µ–ª—ñ...")
    model = LSTMForecastModel(district_id)
    model.build_model(input_shape=(X_train.shape[1], X_train.shape[2]))
    
    print("\n7Ô∏è‚É£ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    print("   ‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 1-3 —Ö–≤–∏–ª–∏–Ω–∏...")
    
    history = model.train(
        X_train, y_train,
        X_val, y_val,
        epochs=30,  # –î–ª—è —Ç–µ—Å—Ç—É - –º–µ–Ω—à–µ –µ–ø–æ—Ö
        batch_size=16
    )
    
    # –ö—Ä–æ–∫ 7: –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    print("\n8Ô∏è‚É£ –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑...")
    test_sequence = X_val[0]
    prediction = model.predict(test_sequence.reshape(1, *test_sequence.shape))
    
    # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É
    predicted_pm25 = preprocessor.inverse_transform_predictions(prediction)[0]
    actual_pm25 = preprocessor.inverse_transform_predictions(np.array([y_val[0]]))[0]
    
    print(f"\n   üîÆ –ü—Ä–æ–≥–Ω–æ–∑ PM2.5: {predicted_pm25:.2f} Œºg/m¬≥")
    print(f"   ‚úÖ –§–∞–∫—Ç–∏—á–Ω–∏–π PM2.5: {actual_pm25:.2f} Œºg/m¬≥")
    print(f"   üìä –†—ñ–∑–Ω–∏—Ü—è: {abs(predicted_pm25 - actual_pm25):.2f} Œºg/m¬≥")
    
    # –ö—Ä–æ–∫ 8: –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏
    print("\n9Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏ –≤–ø–µ—Ä–µ–¥...")
    future_predictions = model.predict_future(X_val[-1], n_hours=24)
    future_pm25 = preprocessor.inverse_transform_predictions(future_predictions)
    
    print(f"   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {len(future_pm25)} –≥–æ–¥–∏–Ω")
    print(f"   üìä –°–µ—Ä–µ–¥–Ω—î –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–µ PM2.5: {np.mean(future_pm25):.2f} Œºg/m¬≥")
    print(f"   üìä Min: {np.min(future_pm25):.2f}, Max: {np.max(future_pm25):.2f}")
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å
    print("\n" + "=" * 60)
    model_info = model.get_model_info()
    print("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å:")
    for key, value in model_info.items():
        print(f"   {key}: {value}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
    print("=" * 60)

if __name__ == "__main__":
    test_model_training()