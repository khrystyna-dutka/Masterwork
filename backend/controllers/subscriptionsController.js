// controllers/subscriptionsController.js
const { query } = require('../config/database');
const { sendDailyEmail } = require('../services/emailService');

// @desc    –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// @route   GET /api/subscriptions
// @access  Private
const getUserSubscriptions = async (req, res) => {
  try {
    const result = await query(
      `SELECT 
        us.id,
        us.district_id,
        us.alert_threshold,
        us.notify_daily_summary,
        us.notify_on_high_pollution,
        us.notify_on_forecast,
        d.name as district_name,
        d.latitude,
        d.longitude
       FROM user_subscriptions us
       JOIN districts d ON us.district_id = d.id
       WHERE us.user_id = $1
       ORDER BY d.name`,
      [req.user.id]
    );

    res.json({
      success: true,
      data: {
        subscriptions: result.rows
      }
    });
  } catch (error) {
    console.error('Get subscriptions error:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// @desc    –û–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// @route   PUT /api/subscriptions
// @access  Private
const updateUserSubscriptions = async (req, res) => {
  try {
    const { district_ids, alert_threshold, notify_daily_summary, notify_on_high_pollution, send_test_email } = req.body;
    const userId = req.user.id;

    console.log('üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);
    console.log('üìã –û–±—Ä–∞–Ω—ñ —Ä–∞–π–æ–Ω–∏:', district_ids);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ district_ids —î –º–∞—Å–∏–≤–æ–º
    if (!Array.isArray(district_ids)) {
      return res.status(400).json({
        success: false,
        message: 'district_ids –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º'
      });
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await query('DELETE FROM user_subscriptions WHERE user_id = $1', [userId]);

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
    if (district_ids.length > 0) {
      const values = district_ids.map((districtId, index) => 
        `($1, $${index + 2}, $${district_ids.length + 2}, $${district_ids.length + 3}, $${district_ids.length + 4})`
      ).join(', ');

      const params = [
        userId,
        ...district_ids,
        alert_threshold || 100,
        notify_daily_summary !== undefined ? notify_daily_summary : true,
        notify_on_high_pollution !== undefined ? notify_on_high_pollution : true
      ];

      await query(
        `INSERT INTO user_subscriptions 
         (user_id, district_id, alert_threshold, notify_daily_summary, notify_on_high_pollution)
         VALUES ${values}`,
        params
      );
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∑ –Ω–∞–∑–≤–∞–º–∏ —Ä–∞–π–æ–Ω—ñ–≤
    const result = await query(
      `SELECT 
        us.id,
        us.district_id,
        us.alert_threshold,
        us.notify_daily_summary,
        us.notify_on_high_pollution,
        d.name as district_name
       FROM user_subscriptions us
       JOIN districts d ON us.district_id = d.id
       WHERE us.user_id = $1
       ORDER BY d.name`,
      [userId]
    );

    console.log('‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ:', result.rows);

    // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω—ñ —Ä–∞–π–æ–Ω–∏ —ñ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π email
    let emailSent = false;
    if (district_ids.length > 0 && send_test_email !== false) {
      try {
        console.log('üìß –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email...');

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userResult = await query(
          'SELECT email, full_name, notification_preferences FROM users WHERE id = $1',
          [userId]
        );

        if (userResult.rows.length > 0) {
          const user = userResult.rows[0];
          console.log('üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:', user.email, user.full_name);
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
          if (user.notification_preferences && user.notification_preferences.email) {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ä–∞–π–æ–Ω—ñ–≤
            const districtsWithData = [];
            
            for (const subscription of result.rows) {
              console.log(`üîç –®—É–∫–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ä–∞–π–æ–Ω—É: ${subscription.district_name} (ID: ${subscription.district_id})`);

              const airQualityResult = await query(`
                SELECT 
                  aqh.aqi,
                  aqh.pm25,
                  aqh.pm10,
                  aqh.no2,
                  aqh.so2,
                  aqh.co,
                  aqh.o3,
                  aqh.temperature,
                  aqh.humidity,
                  aqh.measured_at,
                  d.name as district_name
                FROM air_quality_history aqh
                JOIN districts d ON aqh.district_id = d.id
                WHERE aqh.district_id = $1
                  AND aqh.is_forecast = false
                ORDER BY aqh.measured_at DESC
                LIMIT 1
              `, [subscription.district_id]);

              if (airQualityResult.rows.length > 0) {
                const airData = airQualityResult.rows[0];
                console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ:`, {
                  district: airData.district_name,
                  aqi: airData.aqi,
                  temperature: airData.temperature,
                  measured_at: airData.measured_at
                });

                // –ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
                const districtData = {
                  name: airData.district_name || subscription.district_name,
                  aqi: airData.aqi || 50,
                  pm25: airData.pm25 ? parseFloat(airData.pm25).toFixed(2) : '12.0',
                  pm10: airData.pm10 ? parseFloat(airData.pm10).toFixed(2) : '20.0',
                  no2: airData.no2 ? parseFloat(airData.no2).toFixed(2) : '15.0',
                  so2: airData.so2 ? parseFloat(airData.so2).toFixed(2) : '10.0',
                  co: airData.co ? parseFloat(airData.co).toFixed(2) : '0.5',
                  o3: airData.o3 ? parseFloat(airData.o3).toFixed(2) : '30.0',
                  temperature: airData.temperature ? parseFloat(airData.temperature).toFixed(1) : '18.0',
                  humidity: airData.humidity || 65
                };

                console.log(`üìä –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:`, districtData);
                districtsWithData.push(districtData);
              } else {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö, –¥–æ–¥–∞—î–º–æ —Ä–∞–π–æ–Ω –∑ –º–æ–∫-–¥–∞–Ω–∏–º–∏
                console.log(`‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è –¥–ª—è —Ä–∞–π–æ–Ω—É ${subscription.district_name}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–∫-–¥–∞–Ω—ñ`);
                districtsWithData.push({
                  name: subscription.district_name,
                  aqi: 50,
                  pm25: '12.0',
                  pm10: '20.3',
                  no2: '15.2',
                  so2: '10.1',
                  co: '0.5',
                  o3: '30.5',
                  temperature: '18.5',
                  humidity: 65
                });
              }
            }

            console.log(`üìß –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email –¥–ª—è ${user.email}...`);
            console.log(`üìã –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (${districtsWithData.length} —Ä–∞–π–æ–Ω—ñ–≤):`, districtsWithData);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π email
            const emailResult = await sendDailyEmail(
              user.email,
              user.full_name,
              districtsWithData
            );

            emailSent = emailResult.success;
            
            if (emailSent) {
              console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π email —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${user.email}`);
            } else {
              console.log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π email –¥–ª—è ${user.email}`);
            }
          } else {
            console.log(`‚ö†Ô∏è Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.email}`);
          }
        }
      } catch (emailError) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email:', emailError);
        // –ù–µ –±–ª–æ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫—â–æ email –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—Å—è
      }
    }

    res.json({
      success: true,
      message: '–ü—ñ–¥–ø–∏—Å–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      emailSent: emailSent,
      data: {
        subscriptions: result.rows
      }
    });
  } catch (error) {
    console.error('‚ùå Update subscriptions error:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// @desc    –î–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞–π–æ–Ω
// @route   POST /api/subscriptions/:districtId
// @access  Private
const addSubscription = async (req, res) => {
  try {
    const { districtId } = req.params;
    const userId = req.user.id;
    const { alert_threshold, notify_daily_summary, notify_on_high_pollution } = req.body;

    console.log(`‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–π–æ–Ω ${districtId} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ä–∞–π–æ–Ω —ñ—Å–Ω—É—î
    const districtCheck = await query('SELECT id, name FROM districts WHERE id = $1', [districtId]);
    
    if (districtCheck.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–†–∞–π–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î
    const existingSubscription = await query(
      'SELECT id FROM user_subscriptions WHERE user_id = $1 AND district_id = $2',
      [userId, districtId]
    );

    if (existingSubscription.rows.length > 0) {
      return res.status(400).json({
        success: false,
        message: '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–µ–π —Ä–∞–π–æ–Ω –≤–∂–µ —ñ—Å–Ω—É—î'
      });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
    const result = await query(
      `INSERT INTO user_subscriptions 
       (user_id, district_id, alert_threshold, notify_daily_summary, notify_on_high_pollution)
       VALUES ($1, $2, $3, $4, $5)
       RETURNING *`,
      [
        userId,
        districtId,
        alert_threshold || 100,
        notify_daily_summary !== undefined ? notify_daily_summary : true,
        notify_on_high_pollution !== undefined ? notify_on_high_pollution : true
      ]
    );

    console.log(`‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –¥–æ–¥–∞–Ω–æ:`, result.rows[0]);

    res.status(201).json({
      success: true,
      message: `–ü—ñ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞–π–æ–Ω ${districtCheck.rows[0].name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ`,
      data: {
        subscription: result.rows[0]
      }
    });
  } catch (error) {
    console.error('‚ùå Add subscription error:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// @desc    –í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É
// @route   DELETE /api/subscriptions/:districtId
// @access  Private
const deleteSubscription = async (req, res) => {
  try {
    const { districtId } = req.params;
    const userId = req.user.id;

    console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–π–æ–Ω ${districtId} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);

    const result = await query(
      'DELETE FROM user_subscriptions WHERE user_id = $1 AND district_id = $2 RETURNING *',
      [userId, districtId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ü—ñ–¥–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    console.log(`‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ:`, result.rows[0]);

    res.json({
      success: true,
      message: '–ü—ñ–¥–ø–∏—Å–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå Delete subscription error:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  getUserSubscriptions,
  updateUserSubscriptions,
  addSubscription,
  deleteSubscription
};