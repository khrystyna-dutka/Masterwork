// server.js - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞

require('dotenv').config();

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const app = express();
const forecastRoutes = require('./routes/forecast');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
app.use(helmet());

// CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const corsOptions = {
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true,
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use('/api/forecast', forecastRoutes);
console.log('‚úÖ Forecast routes –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

// –ë–∞–∑–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'EcoLviv API –ø—Ä–∞—Ü—é—î —É—Å–ø—ñ—à–Ω–æ! üå±',
    version: '1.0.0',
    timestamp: new Date().toISOString()
  });
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

// –Ü–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç—ñ–≤
try {
  const authRoutes = require('./routes/authRoutes');
  app.use('/api/auth', authRoutes);
  console.log('‚úÖ Auth routes –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è auth routes:', error.message);
}

try {
  const airQualityRoutes = require('./routes/airQualityRoutes');
  app.use('/api/air-quality', airQualityRoutes);
  console.log('‚úÖ Air Quality routes –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è air-quality routes:', error.message);
}

try {
  const subscriptionsRoutes = require('./routes/subscriptionsRoutes');
  app.use('/api/subscriptions', subscriptionsRoutes);
  console.log('‚úÖ Subscriptions routes –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è subscriptions routes:', error.message);
}

try {
  const mlTestRoutes = require('./routes/mlTestRoutes');
  app.use('/api/ml-test', mlTestRoutes);
  console.log('‚úÖ ML Test routes –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ml-test routes:', error.message);
}

// ========================================
// –¢–ï–°–¢–û–í–Ü ENDPOINTS (—Ç—ñ–ª—å–∫–∏ –¥–ª—è development)
// ========================================
if (process.env.NODE_ENV === 'development') {
  // –†—É—á–Ω–∏–π –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø—Ä–æ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
  app.post('/api/test/collect-data', async (req, res) => {
    try {
      const airQualityHistoryService = require('./services/airQualityHistoryService');
      console.log('üß™ –¢–µ—Å—Ç–æ–≤–∏–π –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö...');
      const result = await airQualityHistoryService.saveCurrentDataToHistory();
      res.json({ 
        success: true, 
        message: '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω–æ',
        result 
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–±–æ—Ä—É:', error);
      res.status(500).json({ 
        success: false, 
        error: error.message 
      });
    }
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ OpenWeather API
  app.get('/api/test/weather/:lat/:lon', async (req, res) => {
    try {
      const airQualityService = require('./services/airQualityService');
      const { lat, lon } = req.params;
      
      console.log(`üß™ –¢–µ—Å—Ç OpenWeather –¥–ª—è [${lat}, ${lon}]...`);
      
      const weatherData = await airQualityService.getWeatherData(parseFloat(lat), parseFloat(lon));
      const airQualityData = await airQualityService.getOpenWeatherAirQuality(parseFloat(lat), parseFloat(lon));
      
      res.json({ 
        success: true,
        weather: weatherData,
        airQuality: airQualityData
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É:', error);
      res.status(500).json({ 
        success: false, 
        error: error.message 
      });
    }
  });

  // –¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ email
  app.post('/api/test/send-daily-emails', async (req, res) => {
    try {
      const { protect } = require('./middleware/auth');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      await new Promise((resolve, reject) => {
        protect(req, res, (err) => {
          if (err) reject(err);
          else resolve();
        });
      });

      const { triggerTestEmail } = require('./services/cronJobs');
      const result = await triggerTestEmail();
      
      res.json({ 
        success: true, 
        message: '–¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ email –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        result 
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: error.message 
      });
    }
  });

  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ endpoints –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:');
  console.log('   POST /api/test/collect-data');
  console.log('   GET /api/test/weather/:lat/:lon');
  console.log('   POST /api/test/send-daily-emails');
}

// –û–±—Ä–æ–±–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
    path: req.path
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.use((err, req, res, next) => {
  console.error('Error:', err);
  
  res.status(err.status || 500).json({
    success: false,
    message: err.message || '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log(`üå± EcoLviv Backend Server`);
  console.log(`üì° –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó URL: http://localhost:${PORT}`);
  console.log(`‚è∞ –ß–∞—Å –∑–∞–ø—É—Å–∫—É: ${new Date().toLocaleString('uk-UA')}`);
  console.log('='.repeat(50));
  
  // –ó–∞–ø—É—Å–∫ schedulers
  try {
    // Scheduler –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –ø—Ä–æ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
    const airQualityScheduler = require('./jobs/airQualityScheduler');
    airQualityScheduler.start();
    console.log('‚úÖ Air Quality Scheduler –∑–∞–ø—É—â–µ–Ω–æ');
  } catch (error) {
    console.error('‚ö†Ô∏è Air Quality Scheduler –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ:', error.message);
  }

  // Scheduler –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö email —Å–ø–æ–≤—ñ—â–µ–Ω—å
  if (process.env.NODE_ENV !== 'test') {
    try {
      const { startDailyEmailCron } = require('./services/cronJobs');
      startDailyEmailCron();
      console.log('‚úÖ Daily Email Scheduler –∑–∞–ø—É—â–µ–Ω–æ');
    } catch (error) {
      console.error('‚ö†Ô∏è Daily Email Scheduler –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ:', error.message);
      console.error('   –ú–æ–∂–ª–∏–≤–æ, –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ email –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤ .env');
    }
  }
  
  console.log('='.repeat(50));
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üëã SIGTERM –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞–∫—Ä–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üëã SIGINT –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞–∫—Ä–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

module.exports = app;
