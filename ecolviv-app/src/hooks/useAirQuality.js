// ecolviv-app/src/hooks/useAirQuality.js
import { useState, useEffect } from 'react';
import { airQualityAPI } from '../services/api';
import { districts } from '../data/districts';  // <-- –ó–ú–Ü–ù–ï–ù–û

export const useAirQuality = () => {
  const [districtsState, setDistricts] = useState(districts);  // <-- –ó–ú–Ü–ù–ï–ù–û –Ω–∞–∑–≤—É –∑–º—ñ–Ω–Ω–æ—ó
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [lastUpdate, setLastUpdate] = useState(null);

  const fetchAirQualityData = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');

      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω—ñ–≤
      const districtsResponse = await airQualityAPI.getDistricts();
      const districtsData = districtsResponse.data.data;
      console.log('üìã –û—Ç—Ä–∏–º–∞–Ω—ñ —Ä–∞–π–æ–Ω–∏ –∑ API:', districtsData);

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
      const airQualityResponse = await airQualityAPI.getCurrentAirQuality();
      const airQualityData = airQualityResponse.data.data;
      console.log('üå°Ô∏è –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è:', airQualityData);

      // –û–±'—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ
      const mergedData = districtsData.map(district => {
        const airData = airQualityData.find(aq => aq.districtId === district.id);
        
        console.log(`üìç –†–∞–π–æ–Ω ${district.name}:`, {
          'ID —Ä–∞–π–æ–Ω—É': district.id,
          '–î–∞–Ω—ñ —Ä–∞–π–æ–Ω—É –∑ API': district,
          '–î–∞–Ω—ñ –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è': airData,
          'PM2.5': airData?.pm25,
          'PM10': airData?.pm10,
          'AQI': airData?.aqi
        });
        
        const merged = {
          ...district,
          baseAQI: airData?.aqi || 50,
          pm25: airData?.pm25 || 0,
          pm10: airData?.pm10 || 0,
          no2: airData?.no2 || 0,
          so2: airData?.so2 || 0,
          co: airData?.co || 0,
          o3: airData?.o3 || 0,
          traffic: 75,
          trees: 40,
          timestamp: airData?.timestamp,
          source: airData?.source
        };
        
        console.log(`‚úÖ –û–±'—î–¥–Ω–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${district.name}:`, merged);
        
        return merged;
      });

      console.log('üîç –§—ñ–Ω–∞–ª—å–Ω—ñ –æ–±\'—î–¥–Ω–∞–Ω—ñ –¥–∞–Ω—ñ (–≤—Å—ñ —Ä–∞–π–æ–Ω–∏):', mergedData);

      setDistricts(mergedData);
      setLastUpdate(new Date());
      setLoading(false);
      
      console.log('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!');
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', err);
      console.error('‚ùå –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', {
        message: err.message,
        response: err.response?.data,
        status: err.response?.status
      });
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ.');
      setDistricts(districts);  // <-- –ó–ú–Ü–ù–ï–ù–û
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAirQualityData();

    // –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
    const interval = setInterval(fetchAirQualityData, 10 * 60 * 1000);

    return () => clearInterval(interval);
  }, []);

  return {
    districts: districtsState,  // <-- –ó–ú–Ü–ù–ï–ù–û
    loading,
    error,
    lastUpdate,
    refreshData: fetchAirQualityData
  };
};