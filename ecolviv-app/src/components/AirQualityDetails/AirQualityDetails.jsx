// src/components/AirQualityDetails/AirQualityDetails.jsx
import React from 'react';
import './AirQualityDetails.css';

const AirQualityDetails = ({ district }) => {
  const pollutants = [
    {
      name: 'PM2.5',
      value: district.pm25,
      unit: 'Œºg/m¬≥',
      description: '–î—Ä—ñ–±–Ω—ñ —á–∞—Å—Ç–∏–Ω–∫–∏',
      icon: 'üî¨',
      thresholds: { good: 12, moderate: 35.4, unhealthy: 55.4 }
    },
    {
      name: 'PM10',
      value: district.pm10,
      unit: 'Œºg/m¬≥',
      description: '–í–µ–ª–∏–∫—ñ —á–∞—Å—Ç–∏–Ω–∫–∏',
      icon: 'üí®',
      thresholds: { good: 54, moderate: 154, unhealthy: 254 }
    },
    {
      name: 'NO‚ÇÇ',
      value: district.no2,
      unit: 'Œºg/m¬≥',
      description: '–î—ñ–æ–∫—Å–∏–¥ –∞–∑–æ—Ç—É',
      icon: 'üöó',
      thresholds: { good: 40, moderate: 90, unhealthy: 120 }
    },
    {
      name: 'SO‚ÇÇ',
      value: district.so2,
      unit: 'Œºg/m¬≥',
      description: '–î—ñ–æ–∫—Å–∏–¥ —Å—ñ—Ä–∫–∏',
      icon: 'üè≠',
      thresholds: { good: 20, moderate: 80, unhealthy: 250 }
    },
    {
      name: 'CO',
      value: district.co,
      unit: 'Œºg/m¬≥',
      description: '–ß–∞–¥–Ω–∏–π –≥–∞–∑',
      icon: '‚ö†Ô∏è',
      thresholds: { good: 4400, moderate: 9400, unhealthy: 12400 }
    },
    {
      name: 'O‚ÇÉ',
      value: district.o3,
      unit: 'Œºg/m¬≥',
      description: '–û–∑–æ–Ω',
      icon: '‚òÄÔ∏è',
      thresholds: { good: 60, moderate: 100, unhealthy: 140 }
    }
  ];

  const getStatus = (value, thresholds) => {
    if (value <= thresholds.good) {
      return { label: '–î–æ–±—Ä–µ', color: '#10b981' };
    } else if (value <= thresholds.moderate) {
      return { label: '–ü–æ–º—ñ—Ä–Ω–æ', color: '#f59e0b' };
    } else if (value <= thresholds.unhealthy) {
      return { label: '–ù–µ–∑–¥–æ—Ä–æ–≤–æ', color: '#ef4444' };
    } else {
      return { label: '–ù–µ–±–µ–∑–ø–µ—á–Ω–æ', color: '#991b1b' };
    }
  };

  return (
    <div className="air-quality-details">
      <div className="details-header">
        <h3>–î–µ—Ç–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–π–æ–Ω—É {district.name}</h3>
        {district.timestamp && (
          <p className="update-time">
            –û–Ω–æ–≤–ª–µ–Ω–æ: {new Date(district.timestamp).toLocaleString('uk-UA')}
          </p>
        )}
        {district.source && (
          <p className="data-source">–î–∂–µ—Ä–µ–ª–æ: {district.source}</p>
        )}
      </div>

      <div className="pollutants-grid">
        {pollutants.map((pollutant) => {
          const status = getStatus(pollutant.value, pollutant.thresholds);
          const percentage = Math.min(
            (pollutant.value / pollutant.thresholds.unhealthy) * 100,
            100
          );

          return (
            <div key={pollutant.name} className="pollutant-card">
              <div className="pollutant-header">
                <span className="pollutant-icon">{pollutant.icon}</span>
                <div className="pollutant-info">
                  <h4>{pollutant.name}</h4>
                  <p className="pollutant-description">{pollutant.description}</p>
                </div>
              </div>

              <div className="pollutant-value">
                <span className="value">{pollutant.value.toFixed(2)}</span>
                <span className="unit">{pollutant.unit}</span>
              </div>

              <div className="pollutant-bar">
                <div
                  className="pollutant-bar-fill"
                  style={{
                    width: `${percentage}%`,
                    backgroundColor: status.color
                  }}
                />
              </div>

              <div className="pollutant-status" style={{ color: status.color }}>
                {status.label}
              </div>
            </div>
          );
        })}
      </div>

      <div className="info-section">
        <h4>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏</h4>
        <ul>
          <li><strong>PM2.5 —ñ PM10</strong> - —Ç–≤–µ—Ä–¥—ñ —á–∞—Å—Ç–∏–Ω–∫–∏ –≤ –ø–æ–≤—ñ—Ç—Ä—ñ –≤—ñ–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É —Ç–∞ –ø—Ä–æ–º–∏—Å–ª–æ–≤–æ—Å—Ç—ñ</li>
          <li><strong>NO‚ÇÇ</strong> - —É—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –ø—Ä–∏ —Å–ø–∞–ª—é–≤–∞–Ω–Ω—ñ –ø–∞–ª–∏–≤–∞ –≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è—Ö</li>
          <li><strong>SO‚ÇÇ</strong> - –≤–∏–∫–∏–¥–∏ –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏—Ö –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤</li>
          <li><strong>CO</strong> - —á–∞–¥–Ω–∏–π –≥–∞–∑, —É—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–ø–æ–≤–Ω–æ–º—É –∑–≥–æ—Ä—è–Ω–Ω—ñ</li>
          <li><strong>O‚ÇÉ</strong> - –ø—Ä–∏–∑–µ–º–Ω–∏–π –æ–∑–æ–Ω, —É—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –ø—ñ–¥ –¥—ñ—î—é —Å–æ–Ω—Ü—è</li>
        </ul>
      </div>
    </div>
  );
};

export default AirQualityDetails;